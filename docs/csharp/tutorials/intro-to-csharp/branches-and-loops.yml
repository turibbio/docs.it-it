### YamlMime:Tutorial
title: Informazioni sulla logica condizionale con istruzioni per rami e cicli
metadata:
  title: Rami e cicli - Esercitazione interattiva introduttiva su C#
  description: In questa esercitazione sui rami e i cicli si userà il browser per imparare a usare C# in modo interattivo. Verranno descritte le procedure per scrivere codice C# e visualizzare i risultati della compilazione ed esecuzione del codice direttamente nel browser.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: Raccolta di elenchi
  ms.openlocfilehash: a7c855e362e606f82a8b576fbb8db1d632b0f0eb
  ms.sourcegitcommit: d9c7ac5d06735a01c1fafe34efe9486734841a72
  ms.translationtype: MT
  ms.contentlocale: it-IT
  ms.lasthandoff: 05/06/2020
  ms.locfileid: "82860984"
items:
- durationInMinutes: 1
  content: >
    Questa esercitazione descrive come scrivere codice che esamina le variabili e modifica il percorso di esecuzione in base a queste variabili. Si userà il browser per scrivere codice C# in modo interattivo e visualizzare i risultati della compilazione ed esecuzione del codice. L'esercitazione contiene una serie di lezioni che esplorano i costrutti per rami e cicli in C#. Queste lezioni presentano le nozioni fondamentali del linguaggio C#.
- title: Prendere decisioni usando l'istruzione if
  durationInMinutes: 4
  content: >
    Eseguire il codice seguente nella finestra interattiva. Selezionare il pulsante **Attiva modalità messa a fuoco** . Quindi, digitare il blocco di codice seguente nella finestra interattiva e selezionare **Esegui**:


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    Se si esegue questa operazione nell'ambiente in uso, è consigliabile seguire invece le istruzioni per la [versione locale](branches-and-loops-local.md) .


    Modificare la dichiarazione di `b` in modo che la somma sia minore di 10:


    ```csharp

    int b = 3;

    ```


    Selezionare di nuovo il pulsante **Esegui** . Dato che la risposta è minore a 10, non viene visualizzato nulla. La **condizione** testata è false. Non esiste codice da eseguire perché è stato scritto solo uno dei possibili rami per un'istruzione `if`, ovvero il ramo true.


    > [!TIP]

    > Mentre si impara a usare C# (o qualsiasi linguaggio di programmazione) sicuramente si commetteranno errori durante la scrittura del codice. Il **compilatore** troverà questi errori e li segnalerà. Quando l'output contiene messaggi di errore, esaminare attentamente il codice di esempio e il codice nella finestra interattiva per scoprire cosa correggere.

    > Questo esercizio sarà utile per imparare la struttura del codice C#.


    Questo primo esempio dimostra le potenzialità di `if` e dei tipi booleani. Un *valore booleano* è una variabile che può avere uno dei due `true` valori `false`seguenti: o. C# definisce un tipo speciale, `bool` per le variabili booleane. L'istruzione `if` controlla il valore di un `bool`. Quando il valore è `true`, viene eseguita l'istruzione che segue `if`. In caso contrario, l'istruzione viene ignorata.


    Questo processo di controllo delle condizioni ed esecuzione di istruzioni in base a queste condizioni offre molte potenzialità. L'esplorazione continua nelle prossime lezioni.
- title: Usare insieme if ed else
  durationInMinutes: 10
  content: "\nPer eseguire codice diverso per i rami true e false, è necessario creare un ramo `else` che viene eseguito quando la condizione è false. Provare a eseguire quanto segue:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nL'istruzione che segue la parola chiave `else` viene eseguita solo quando la condizione testata è `false`. La combinazione di `if` e `else` con condizioni booleane offre tutte le potenzialità necessarie.\n\n> [!IMPORTANT]\n> Il rientro applicato alle righe successive alle istruzioni `if` e `else` è pensato per i lettori umani.\n> Nel linguaggio C# i rientri o gli spazi vuoti non sono significativi.\n> L'istruzione che segue la parola chiave `if` o `else` verrà eseguita in base alla condizione. Tutti gli esempi in questa esercitazione seguono una procedura comune che prevede il rientro delle righe in base al flusso di controllo delle istruzioni.\n\nDato che il rientro non è significativo, è necessario usare `{` e `}` per indicare quando si vuole includere più di un'istruzione nel blocco con esecuzione condizionale. I programmatori C# usano in genere le parentesi graffe in tutte le clausole `if` e `else`. L'esempio seguente è identico a quello appena creato. Provarlo.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Nelle parti restanti di questa esercitazione, tutti gli esempi di codice includono le parentesi graffe conformemente alle consuetudini comuni.\n\nÈ possibile testare condizioni più complesse:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\nIl simbolo `==` verifica l'*uguaglianza*. Il simbolo `==` distingue il test per l'uguaglianza dall'assegnazione, illustrata in `a = 5`.\n\n`&&` rappresenta \"e\" e significa che entrambe le condizioni devono essere true per eseguire l'istruzione nel ramo true.  Questi esempi mostrano anche che è possibile includere più istruzioni in ogni ramo condizionale, a condizione di racchiuderle tra `{` e `}`.\n\nÈ anche possibile usare `||` per rappresentare \"o\":\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\nModificare i valori di `a`, `b` e `c` e passare da `&&` a `||` per esplorare. Si otterranno più informazioni sul funzionamento degli operatori `&&` e `||`.\n"
- title: Usare i cicli per ripetere le operazioni
  durationInMinutes: 6
  content: >
    I **cicli** rappresentano un altro concetto importante per la creazione di programmi di più grandi dimensioni. I cicli vengono usati per ripetere istruzioni che si vuole eseguire più volte. Provare questo codice nella finestra interattiva:


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    L'istruzione `while` verifica una condizione ed esegue l'istruzione che segue `while`. Ripeterà la verifica della condizione e l'esecuzione di tali istruzioni fino a quando la condizione è false.


    Questo esempio include un altro operatore nuovo. I caratteri `++` dopo la variabile `counter` rappresentano l'operatore di **incremento**. Questo operatore aggiunge 1 al valore del contatore e archivia il valore nella variabile contatore.


    > [!IMPORTANT]

    > Assicurarsi che la condizione del ciclo `while` passi a false quando si esegue il codice. In caso contrario, si crea un **ciclo infinito** in cui il programma non termina mai. Non è prevista una dimostrazione di questo scenario, perché in questo caso si verifica il timeout del motore che esegue il codice e il programma non produrrà alcun output.


    Il ciclo `while` testa la condizione prima di eseguire il codice dopo `while`. Il ciclo `do` ... `while` esegue prima il codice e poi controlla la condizione, L'aspetto sarà simile al seguente:


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    Questo ciclo `do` e il ciclo `while` precedente funzionano allo stesso modo.


    Nella prossima lezione verrà presentata un'ultima istruzione di ciclo.
- title: Usare il ciclo for
  durationInMinutes: 5
  content: >
    Un'altra istruzione di ciclo comune nel codice C# è il ciclo `for`. Provare questo codice nella finestra interattiva:


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    Questo codice esegue le stesse operazioni di ciclo `while` e `do` già usate. L'istruzione `for` è composta da tre parti che ne controllano il funzionamento.


    La prima parte è l' **inizializzatore for**: `int counter = 0;` dichiara che `counter` è la variabile del ciclo e imposta il valore iniziale su `0`.


    La parte intermedia è la **condizione for**: `counter < 10` dichiara che questo `for` ciclo continua a essere eseguito fino a quando il valore del contatore è minore di 10.


    La parte finale è l' **iteratore for**: `counter++` specifica come modificare la variabile del ciclo dopo l'esecuzione del blocco dopo `for` l'istruzione. In questo caso, specifica che `counter` deve essere incrementato di 1 a ogni esecuzione del blocco.


    Sperimentare da soli questi elementi. Eseguire queste prove:


    - Cambiare l'inizializzatore in modo che inizi da un valore diverso.

    - Cambiare la condizione in modo che si interrompa in corrispondenza di un valore diverso.


    Al termine, passare alla prossima lezione che prevede la scrittura di codice per usare quanto finora appreso.
- title: Cicli annidati creati
  durationInMinutes: 10
  content: "Un `while`ciclo `do` , `for` o può essere annidato all'interno di un altro ciclo per creare una matrice utilizzando la combinazione di ogni elemento del ciclo esterno con ogni elemento del ciclo interno. A questo scopo, è necessario compilare un set di coppie alfanumeriche per rappresentare righe e colonne.\n\nUn `for` ciclo può generare le righe:\n\n```csharp\nfor (int row = 1; row < 11; row++)\n{\n  Console.WriteLine($\"The row is {row}\");\n}\n```\n\nUn altro ciclo può generare le colonne:\n\n```csharp\nfor (char column = 'a'; column < 'k'; column++)\n{\n  Console.WriteLine($\"The column is {column}\");\n}\n```\n\nÈ possibile annidare un ciclo all'interno dell'altro per formare coppie:\n  \n```csharp\nfor (int row = 1; row < 11; row++)\n{\n  for (char column = 'a'; column < 'k'; column++)\n  {\n    Console.WriteLine($\"The cell is ({row}, {column})\");\n  }\n}\n```\n\nÈ possibile osservare che il ciclo esterno viene incrementato una volta per ogni esecuzione completa del ciclo interno. Invertire l'annidamento di righe e colonne e visualizzare le modifiche per se stessi.\n"
- title: Combinare rami e cicli
  durationInMinutes: 12
  content: >
    Dopo aver esaminato l'istruzione `if` e i costrutti per i cicli nel linguaggio C#, provare a scrivere codice C# per ottenere la somma di tutti i numeri interi da 1 a 20 divisibili per 3.  Ecco alcuni suggerimenti:


    - L'operatore `%` restituisce il resto di un'operazione di divisione.

    - L'istruzione `if` offre la condizione per stabilire se un numero deve fare parte della somma.

    - Il ciclo `for` può essere utile per ripetere una serie di passaggi per tutti i numeri da 1 a 20.


    Sperimentare e quindi controllare i risultati. Come risposta si riceverà il valore 63.
- title: Completare l'esercizio
  durationInMinutes: 1
  content: >
    I risultati ottenuti sono simili a questi?


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```
- title: Congratulazioni!
  content: >-
    È stata completata l'esercitazione interattiva "Rami e cicli". È possibile selezionare il collegamento **elenco raccolta** seguente per avviare la successiva esercitazione interattiva. in alternativa, è possibile visitare il [sito .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) per scaricare il .NET Core SDK, creare un progetto nel computer e rimanere codificati. La sezione "passaggi successivi" riporta a queste esercitazioni.


    Maggiori informazioni su questi concetti sono disponibili in questi argomenti:


    - [Istruzioni if ed else](../../language-reference/keywords/if-else.md)

    - [Istruzione while](../../language-reference/keywords/while.md)

    - [Istruzione do](../../language-reference/keywords/do.md)

    - [Istruzione for](../../language-reference/keywords/for.md)
