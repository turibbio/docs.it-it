### YamlMime:Tutorial
title: Hello World - Esercitazione interattiva introduttiva su C#
metadata:
  title: Hello World - Esercitazione interattiva introduttiva su C#
  description: In questa esercitazione si userà il browser per imparare a usare C# in modo interattivo. Verranno descritte le procedure per scrivere codice C# e visualizzare i risultati della compilazione ed esecuzione del codice direttamente nel browser.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Numeri in C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 77180064f810cf70b1ec0ef3d72bbd9005b78a47
  ms.sourcegitcommit: d7666f6e49c57a769612602ea7857b927294ce47
  ms.translationtype: MT
  ms.contentlocale: it-IT
  ms.lasthandoff: 04/30/2020
  ms.locfileid: "82595910"
items:
- durationInMinutes: 1
  content: >
    In questa esercitazione il linguaggio C# viene insegnato in modo interattivo, usando il browser per scrivere codice C# e visualizzare i risultati della compilazione ed esecuzione del codice. Contiene una serie di lezioni che iniziano con un programma "Hello World". Queste lezioni presentano le nozioni fondamentali del linguaggio C#.
- title: Eseguire il primo programma C#
  durationInMinutes: 2
  content: >
    Eseguire il codice seguente nella finestra interattiva. Selezionare il pulsante **Attiva modalità messa a fuoco** . Quindi, digitare il blocco di codice seguente nella finestra interattiva e selezionare **Esegui**:


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    Congratulazioni! È stato eseguito il primo programma C#, ovvero un semplice programma che stampa il messaggio "Hello World!". Per stampare il messaggio, viene usato il metodo <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>. `Console` è un tipo che rappresenta la finestra della console. `WriteLine` è un metodo del tipo `Console` che stampa una riga di testo nella console di testo.


    Nel resto di questa lezione viene descritto l'uso del tipo `string`, che rappresenta il testo in C#. Come il tipo `Console`, anche per il tipo `string` sono disponibili metodi. I metodi `string` operano sul testo.


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Dichiarare e usare le variabili
  durationInMinutes: 3
  content: >
    Il primo programma ha stampato la stringa (`string`) "Hello World!" sullo schermo.


    > [!TIP]

    > Mentre si impara a usare C# (o qualsiasi linguaggio di programmazione) sicuramente si commetteranno errori durante la scrittura del codice. Il **compilatore** troverà questi errori e li segnalerà. Quando l'output contiene messaggi di errore, esaminare attentamente il codice di esempio e il codice nella finestra interattiva per scoprire cosa correggere.

    > Questo esercizio sarà utile per imparare la struttura del codice C#.


    Il primo programma è limitato alla stampa di un solo messaggio. È possibile scrivere programmi più utili usando le **variabili**. Una **variabile** è un simbolo utilizzabile per eseguire lo stesso codice con valori diversi. Per provarle le variabili nella pratica, sostituire il codice scritto nella finestra interattiva con il codice seguente:


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    La prima riga dichiara la variabile `aFriend` e le assegna il valore "Bill". La seconda riga stampa il nome.


    È possibile assegnare valori diversi a qualsiasi variabile dichiarata. È possibile sostituire il nome con quello di un amico. Aggiungere queste due righe nella finestra interattiva dopo il codice già aggiunto:


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    Si noti che la stessa riga di codice stampa due messaggi diversi, in base al valore archiviato nella variabile `aFriend`.


    Forse si è anche notato che la parola "Hello" manca negli ultime due messaggi. Per ovviare a questa mancanza,  modificare ora le righe che stampano il messaggio come segue:


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    Selezionare **Esegui** di nuovo per visualizzare i risultati.


    Finora è stato usato `+` per creare nuove stringhe da stringhe **variabili** e **costanti**. Esiste un modo migliore.

    È possibile inserire una variabile tra i caratteri `{` e `}` per indicare a C# di sostituire il testo con il valore della variabile.


    Questo metodo viene definito [Interpolazione di stringhe](../../language-reference/tokens/interpolated.md).


    Se si aggiunge `$` prima delle virgolette di apertura della stringa, è possibile includere variabili come `aFriend` nella stringa tra parentesi graffe. Ad esempio:



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    Selezionare **Esegui** di nuovo per visualizzare i risultati. Anziché "Hello {aFriend}", il messaggio deve essere "Hello Maira".


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Usare le stringhe
  durationInMinutes: 5
  content: >
    L'ultima modifica era solo un assaggio di quello che si può fare con le stringhe. L'esplorazione continua nelle prossime lezioni.


    È possibile includere più di una variabile tra parentesi graffe. Provare a eseguire quanto segue:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Per eseguire operazioni più avanzate con le stringhe, è utile sapere che le stringhe sono più di una semplice raccolta di lettere. È possibile trovare la lunghezza di una stringa con `Length`. `Length` è una **proprietà** di una stringa e restituisce il numero di caratteri nella stringa. Aggiungere il codice seguente nella parte inferiore della finestra interattiva:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Può essere un buon momento per sperimentare da soli. Si è appreso che `Console.WriteLine()` scrive testo sullo schermo. È stato spiegato come dichiarare le variabili e concatenare le stringhe. Sperimentare nella finestra interattiva Nella finestra è disponibile una funzionalità denominata **IntelliSense** che offre suggerimenti sulle operazioni che è possibile eseguire. Digitare `.` dopo `d` in `firstFriend`. Verrà visualizzato un elenco di suggerimenti sulle proprietà e i metodi che è possibile usare.


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Altre operazioni sulle stringhe
  durationInMinutes: 5
  content: >
    È stato utilizzato un **Metodo**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, per stampare messaggi. Un **metodo** è un blocco di codice che implementa un'azione. I metodi hanno un nome, quindi sono accessibili.


    Si supponga che le stringhe contengano spazi iniziali o finali che non si vuole visualizzare. È quindi necessario **tagliare** gli spazi dalle stringhe.

    A questo scopo, è possibile usare il metodo <xref:System.String.Trim%2A> e i metodi correlati <xref:System.String.TrimStart%2A> e <xref:System.String.TrimEnd%2A>. È sufficiente usare questi metodi per rimuovere gli spazi iniziali e finali. Provare il codice seguente:


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    Le parentesi quadre `[` e `]` consentono di visualizzare i `Trim`metodi, `TrimStart` e `TrimEnd` . Le parentesi quadre mostrano dove spazi vuoti inizia e termina.


    Questo esempio mette in rilievo un paio di concetti importanti correlati all'uso delle stringhe. I metodi che operano sulle stringhe restituiscono nuovi oggetti stringa, anziché apportare le modifiche sul posto. Si può notare che ogni chiamata di uno qualsiasi dei metodi `Trim` restituisce una nuova stringa, ma non modifica il messaggio originale.


    Sono disponibili altri metodi per lavorare su una stringa. È probabile, ad esempio, che in precedenza si sia usato un comando per la ricerca e la sostituzione in un editor o un elaboratore di testo. Il metodo <xref:System.String.Replace%2A> esegue un'operazione simile in una stringa, ovvero cerca una sottostringa e la sostituisce con testo diverso. Il <xref:System.String.Replace%2A> metodo accetta due **parametri**. Queste sono le stringhe tra parentesi. La prima stringa è il testo da cercare. La seconda stringa è il testo sostitutivo. Provare direttamente. Aggiungere questo codice. Digitarlo per visualizzare i suggerimenti fin dal momento in cui si inizia a digitare `.Re` dopo la variabile `sayHello`:


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    Altri due metodi utili consentono di trasformare una stringa in tutte maiuscole o tutte minuscole. Provare il codice seguente. Digitarlo per vedere come **IntelliSense** offre suggerimenti fin dal momento in cui si inizia a digitare `To`:


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Stringhe di ricerca
  durationInMinutes: 10
  content: >
    L'altra parte di un'operazione di *ricerca e sostituzione* consiste nel trovare testo all'interno di una stringa. È possibile usare il metodo <xref:System.String.Contains%2A> per la ricerca. Questo metodo indica se una stringa contiene una sottostringa. Provare il codice seguente per sperimentare <xref:System.String.Contains%2A>:


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    Il metodo <xref:System.String.Contains%2A> restituisce un valore **booleano** che indica se la stringa di ricerca è stata trovata. Un valore **booleano** archivia un valore `true` o `false`. Quando vengono visualizzati come output di testo, sono in `True` maiuscolo `False`: rispettivamente e. In una lezione successiva verranno fornite ulteriori informazioni sui valori **booleani**.


    ***Esercizio***


    Esistono altri due metodi simili, <xref:System.String.StartsWith%2A> e <xref:System.String.EndsWith%2A> che consentono di cercare sottostringhe in una stringa, in particolare di trovare una sottostringa all'inizio o alla fine della stringa. Provare a modificare l'esempio precedente per usare <xref:System.String.StartsWith%2A> e <xref:System.String.EndsWith%2A> invece di <xref:System.String.Contains%2A>. Cercare "You" o "goodbye" all'inizio di una stringa. Cercare "hello" o "goodbye" alla fine di una stringa.


    > [!NOTE]

    > Tenere conto della punteggiatura per la ricerca del testo alla fine della stringa. Se la stringa termina con un punto, è necessario cercare una stringa che termina con un punto.


    Si otterrà `true` se la stringa inizia con "You" e termina con "hello" e false se la stringa inizia o termina con "goodbye".


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- title: Completare l'esercizio
  durationInMinutes: 3
  content: >
    I risultati ottenuti sono simili a questi?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > Questa esperienza di scrittura del codice online è in modalità di anteprima. Se si verificano problemi, segnalarli [nel repository dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    È stata completata l'esercitazione introduttiva "Hello C#". Per avviare la prossima esercitazione interattiva, è possibile selezionare il collegamento **numeri in C#. in** alternativa, è possibile visitare il [sito .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) per scaricare il .NET Core SDK, creare un progetto nel computer e rimanere codifica. La sezione "passaggi successivi" riporta a queste esercitazioni.


    Altre informazioni sul tipo `string`:

    - Argomento della [Guida per programmatori C#](../../programming-guide/index.md) relativo alle [stringhe](../../programming-guide/strings/index.md).

    - [Suggerimenti pratici per l'utilizzo delle stringhe](../../how-to/index.md#working-with-strings).
